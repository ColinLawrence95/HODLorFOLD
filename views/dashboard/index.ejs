<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%=user.username%>'s Dashboard</title>
  <!-- Include Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="../dashboard-style.css" />
  <!-- Include chartjs-adapter-date-fns (for date handling in Chart.js) -->
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
</head>

<body>
  <%- include('../partials/_navbar.ejs') %>
  <div class="top-row-container">
  <h1 id="dashboard-title"><%=user.username%>'s Dashboard</h1> 
  <div class="price-result-container">
  <h2 id="price-coin-title"><%= coinSearch %> Price</h2>
  <p>Current Price: $<%= coinData[coinSearch].usd %></p>
  </div>
  <p>Powered by <a href="https://www.coingecko.com/en/api">CoinGecko API</a></p>
  </div>
  <form action="/dashboard/<%= user._id %>" method="GET" class="coin-search">
    <input type="text" name="coinSearch" id="coinSearch" required placeholder="Search Coin" value="<%= coinSearch || '' %>" />
    <button id="search-button" type="submit">Search</button>
    
  </form>
  <div class="graph-ui">
  <h3>Price History Graph</h3>
 
    <button id="1Day" onclick="updateChart('1Day')">1 Day</button>
    <button id="1Week" onclick="updateChart('1Week')">1 Week</button>
  </div>

  <canvas id="priceChart" width="550" height="150"></canvas>

  <script>
    // Embed the historical data directly into the script
    const historicalData = <%- JSON.stringify(historicalData) %>;

    // Default time period set to 1 Month
    let currentData = historicalData;

    // Filter data based on the selected time range
    function filterData(timePeriod) {
      const now = new Date();
      let filteredData = [];

      if (!historicalData || historicalData.length === 0) {
        console.error("No historical data available.");
        return [];
      }

      // Ensure timestamps are properly parsed
      filteredData = historicalData.filter(data => {
        const dataTime = new Date(data.timestamp); // Convert to Date object
        if (timePeriod === '1Day') {
          return dataTime >= new Date(now - 24 * 60 * 60 * 1000);
        } else if (timePeriod === '1Week') {
          return dataTime >= new Date(now - 7 * 24 * 60 * 60 * 1000);
        } 
        return false;
      });

      console.log(`Filtered Data for ${timePeriod}:`, filteredData); // Debugging
      return filteredData;
    }

    let priceChart; // Store chart instance globally

    function updateChart(timePeriod) {
      event.preventDefault(); // Prevent button click from refreshing the page

      const filteredData = filterData(timePeriod);
      if (filteredData.length === 0) {
        alert("No historical data available for this time range.");
        return;
      }

      const labels = filteredData.map(data => new Date(data.timestamp));
      const prices = filteredData.map(data => data.price);

      // Dynamically adjust the time unit
      let timeUnit = 'day'; // Default to 'day'
      if (timePeriod === '1Day') {
        timeUnit = 'hour'; // Show hourly data for 1-day view
      }

      if (priceChart) {
        // Update existing chart
        priceChart.data.labels = labels;
        priceChart.data.datasets[0].data = prices;
        priceChart.options.scales.x.time.unit = timeUnit; // Change time unit dynamically
        priceChart.update();
      } else {
        const ctx = document.getElementById('priceChart').getContext('2d');
        priceChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: 'Price (USD)',
              data: prices,
              borderColor: "rgb(255, 179, 37)",
              backgroundColor: "rgb(255, 179, 37, 0.3)",
              fill: true,
            }]
          },
          options: {
            responsive: true,
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: timeUnit, // Dynamically set time unit
                  tooltipFormat: timeUnit === 'hour' ? 'MMM dd, HH:mm' : 'MMM dd', // Adjust tooltip format
                },
                title: {
                  display: true,
                  text: 'Time',
                  color: "#f1f1f1",
                },
                ticks: {
                  color: "#f1f1f1",
                },
                grid: {
                  color: "#f1f1f150",
                }
              },
              y: {
                title: {
                  display: true,
                  text: 'Price (USD)',
                  color: "#f1f1f1"
                },
                ticks: {
                  color: "#f1f1f1",
                },
                grid: {
                  color: "#f1f1f150",
                },
              }
            }
          }
        });
      }
    }

    // Initialize with 1 Month data on page load
    document.addEventListener('DOMContentLoaded', function() {
      updateChart('1Day');
    });
  </script>
</body>

</html>